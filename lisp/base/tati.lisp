; (defun f (xs)
;   (cond ((null xs) nil)
;         ((evenp (first xs)) (let ((val (f (rest xs)))) (cons (first xs) val)))
;         (t (let ((val (f (rest xs)))) val))))
; (defun g (xs)
;   (cond ((null xs) (values nil))
;         ((evenp (first xs)) (multiple-value-bind (val) (g (rest xs)) (values (cons (first xs) val))))
;         (t (multiple-value-bind (val) (g (rest xs)) (values val)))))
(defun thru (f xs)
  (if (null xs)
      (values nil nil)
      (multiple-value-bind (xs-a xs-b)
        (thru f (rest xs))
        (if (funcall f (first xs))
            (values (cons (first xs) xs-a) xs-b)
            (values xs-a (cons (first xs) xs-b))))))
(defun number-satisfy (f xs)
  (multiple-value-bind (xs1 xs2)
    (thru f xs)
    (values (len xs1) (len xs2))))
; (defun f (g xs)
;   (if (null xs) (values 0 0) (multiple-value-bind (a b)
;   (f g (rest xs))
;   (if (funcall g (first xs))
;       (values (+ a 1) b)
;       (values a (+ b 1))))))
(defun take (n xs)
  (if (= n 0) (values nil xs) (multiple-value-bind (xs1 xs2) (take (- n 1) (rest xs))
  (values (cons (first xs) xs1) xs2))))
(defun match (xs ys)
  (if (null xs) (values t nil) (multiple-value-bind (a b)
  (match (rest xs) (rest ys))
  (if (equal (first xs) (first ys))
    (values a (cons t b))
    (values nil (cons nil b))))))
; (defun f (xs)
;   (if (null xs) (values 0 nil) (multiple-value-bind (a b) (f (rest xs))
;   (if (numberp (first xs))
;     (values (+ (first xs) a) b)
;     (values a (first xs))))))
; (defun f (xs) (if (null xs) (values 0 nil) (multiple-value-bind (a b) (f (rest xs)) (cond ((numberp (first xs)) (values (+ (first xs) a) b)) ((null b) (values a (first xs))) (t (values a b))))))

(defun g (xs)
  (if (null xs) (values 0 nil) (multiple-value-bind (a b)
  (g (rest xs))
  (if (numberp (first xs)) (values (+ (first xs) a) b)
    (values a (if b b (first xs)))))))

(defun f (min1 xs)
  (if (null xs)
    (values min1 nil t)
    (multiple-value-bind (min2 zs flag)
    (f (if (< min1 (first xs))
      min1
      (first xs))
    (rest xs))
    (if (and (equal (first xs) min2) flag)
      (values min2 zs nil)
      (values min2 (cons (car xs) zs) flag)))))
(defun minimum (xs)
  (f (first xs) xs))
(defun _sort (xs)
  (if (null xs) nil (multiple-value-bind (a zs)
    (minimum xs)
  (cons a (_sort zs)))))
